
type AwsTag {
  key: String
  value: String
}

input InputAwsTag {
    key: String
    value: String
}

input AwsAddTagsAction {
    tags: [InputAwsTag]
}

type AwsVpc {
   vpcId: String
   state: String
   cidrBlock: String
   dhcpOptionsId: String
   tags: [AwsTag]
   instanceTenancy: String
   isDefault: Boolean
   ipv6CidrBlockAssociationSet: [String]
 }

 input InputAwsVpc {
    vpcId: String
    state: String
    cidrBlock: String
    dhcpOptionsId: String
    inputTags: [InputAwsTag]
    instanceTenancy: String
    isDefault: Boolean
    ipv6CidrBlockAssociationSet: [String]
  }

input AwsVpcFilter {
   contains: InputAwsVpc
}

 type AwsEc2Instance {
   instanceId: String
   imageId: String
   state: String
   privateDnsName: String
   publicDnsName: String
   stateTransitionReason: String
   keyName: String
   amiLaunchIndex: Int
   instanceType: String
   kernelId: String
   ramdiskId: String
   platform: String
   subnetId: String
   vpcId: String
   privateIpAddress: String
   publicIpAddress: String
   architecture: String
   rootDeviceType: String
   rootDeviceName: String
   virtualizationType: String
   instanceLifecycle: String
   spotInstanceRequestId: String
   clientToken: String
   sourceDestCheck: Boolean
   hypervisor: String
   ebsOptimized: Boolean
   sriovNetSupport: String
   enaSupport: Boolean
   productCodes: [String]
   launchTime: String
   placement: String
   monitoring: String
   stateReason: String
   blockDeviceMappings: [String]
   securityGroups: [String]
   networkInterfaces: [String]
   iamInstanceProfile: String
   tags: [AwsTag]
 }

input InputAwsEc2Instance {
    instanceId: String
    imageId: String
    state: String
    privateDnsName: String
    publicDnsName: String
    stateTransitionReason: String
    keyName: String
    amiLaunchIndex: Int
    instanceType: String
    kernelId: String
    ramdiskId: String
    platform: String
    subnetId: String
    vpcId: String
    privateIpAddress: String
    publicIpAddress: String
    architecture: String
    rootDeviceType: String
    rootDeviceName: String
    virtualizationType: String
    instanceLifecycle: String
    spotInstanceRequestId: String
    clientToken: String
    sourceDestCheck: Boolean
    hypervisor: String
    ebsOptimized: Boolean
    sriovNetSupport: String
    enaSupport: Boolean
    productCodes: [String]
    launchTime: String
    placement: String
    monitoring: String
    stateReason: String
    blockDeviceMappings: [String]
    securityGroups: [String]
    networkInterfaces: [String]
    iamInstanceProfile: String
    inputTags: [InputAwsTag]
}

input AwsEc2InstanceFilter {
    contains: InputAwsEc2Instance
}

 type GcpComputeInstance {
   instanceId: InstanceId
   generatedId: String
   networkInterfaces: [String]
   description: String
 }

 type InstanceId {
    instance: String
    zone: String
    zoneId: String
 }

 type Query {
   awsVpcs(filter: AwsVpcFilter): [AwsVpc]
   awsEc2Instances(filter: AwsEc2InstanceFilter): [AwsEc2Instance]
   gcpInstances: [GcpComputeInstance]
 }

 type Mutation {
   vpcs(filter: AwsVpcFilter, addTags: AwsAddTagsAction): [AwsVpc]
   ec2Instances(filter: AwsEc2InstanceFilter, addTags: AwsAddTagsAction): [AwsEc2Instance]
 }

 schema {
   query: Query
   mutation: Mutation
 }
